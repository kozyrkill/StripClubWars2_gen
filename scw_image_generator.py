#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCW Character Image Pack Generator
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–¥–∂-–ø–∞–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã Strip Club Wars 2

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Stable Diffusion WebUI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏–≥—Ä—ã.
"""

import os
import json
import requests
import io
import base64
from PIL import Image, ImageOps
from rembg import remove
import argparse
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from pathlib import Path
import time
import random
import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Stable Diffusion WebUI
WEBUI_URL = "http://localhost:7860"
WEBUI_API_URL = f"{WEBUI_URL}/sdapi/v1"

@dataclass
class CharacterAttributes:
    """–ê—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (reqphys)
    gender: str  # m/f
    age_group: int  # 0-5 (16-18, 18-24, 22-31, 28-42, 38-51, 48+)
    ethnicity: str  # w/b/h/a/r (white, black, hispanic, asian, middle-eastern)
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (optphys)
    height: str = "m"  # t/m/s (tall, medium, short)
    body_shape: str = "n"  # s/n/c/f (slim, normal, curvy, fit)
    hips_size: str = "m"  # s/m/l (small, medium, large)
    breast_penis_size: str = "m"  # s/m/l/h/x (tiny, small, medium, large, huge, extra-huge)
    skin_tone: str = "l"  # l/m/d (light, medium, dark)
    
    # –ê—Ç—Ä–∏–±—É—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (imgphys)
    hair_color: str = "m"  # l/m/d (light, medium, dark)
    hair_length: str = "m"  # b/s/m/l (bald, short, medium, long)
    eye_color: str = "m"  # l/m/d (light, medium, dark)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    hair_style: str = "n"  # n/s/c/w (normal, straight, curly, wavy)
    facial_hair: str = "n"  # n/m/b/f (none, mustache, beard, full_beard) - —Ç–æ–ª—å–∫–æ –¥–ª—è –º—É–∂—á–∏–Ω
    makeup: str = "n"  # n/l/m/h (none, light, medium, heavy) - —Ç–æ–ª—å–∫–æ –¥–ª—è –∂–µ–Ω—â–∏–Ω
    tattoos: str = "n"  # n/s/m/l (none, small, medium, large)
    piercings: str = "n"  # n/e/o/m (none, ears, nose, multiple)
    expression: str = "n"  # n/s/h/f (neutral, smile, happy, flirty)
    clothing_style: str = "c"  # c/e/g/s (casual, elegant, gothic, sporty)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∑ –∏ –∏—Ö –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
POSES_CONFIG = {
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–∑—ã –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    "head": {"reveal_variants": [0], "required": True, "description": "headshot"},
    "cas": {"reveal_variants": [0, 1, 2], "required": True, "description": "casual clothes"},
    "uw": {"reveal_variants": [3, 4, 5], "required": True, "description": "underwear"},
    "nude": {"reveal_variants": [9, 10, 11], "required": True, "description": "nude"},
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑—ã
    "bc": {"reveal_variants": [0, 1], "required": False, "description": "business casual"},
    "biz": {"reveal_variants": [0, 1], "required": False, "description": "business suit"},
    "fun": {"reveal_variants": [0, 1, 2], "required": False, "description": "fun/workout clothes"},
    
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∂–µ–Ω—â–∏–Ω
    "tl": {"reveal_variants": [6, 7, 8], "required": False, "description": "topless", "female_only": True},
    "ss": {"reveal_variants": [2, 3, 4], "required": False, "description": "swimsuit", "female_only": True},
    "s1": {"reveal_variants": [1, 2, 3], "required": False, "description": "stripper outfit 1", "female_only": True},
    "s2": {"reveal_variants": [3, 4, 5], "required": False, "description": "stripper outfit 2", "female_only": True},
    "s3": {"reveal_variants": [5, 6, 7], "required": False, "description": "stripper outfit 3", "female_only": True},
    "preg": {"reveal_variants": [1, 3, 6], "required": False, "description": "pregnant", "female_only": True},
}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç—ã
GENDER_PROMPTS = {
    "f": "beautiful woman, female",
    "m": "handsome man, male"
}

AGE_PROMPTS = {
    0: "teen, 18 years old, very young, petite",
    1: "young adult, 20 years old",
    2: "young adult, 25 years old", 
    3: "adult, 35 years old",
    4: "middle-aged, 45 years old",
    5: "mature, 55 years old"
}

ETHNICITY_PROMPTS = {
    "w": "caucasian, white skin",
    "b": "african american, dark skin",
    "h": "hispanic, latin, medium skin tone",
    "a": "asian, light skin",
    "r": "middle eastern, medium skin tone"
}

BODY_SHAPE_PROMPTS = {
    "s": "slim body, skinny",
    "n": "normal body type, average build",
    "c": "curvy body, voluptuous",
    "f": "fit body, athletic, muscular"
}

HAIR_COLOR_PROMPTS = {
    "l": "blonde hair, light hair",
    "m": "brown hair, medium hair color",
    "d": "dark hair, black hair"
}

HAIR_LENGTH_PROMPTS = {
    "b": "bald, no hair",
    "s": "short hair",
    "m": "medium length hair", 
    "l": "long hair"
}

POSE_PROMPTS = {
    "head": "portrait, headshot, face focus, upper body",
    "cas": "casual clothes, jeans, t-shirt, everyday wear",
    "bc": "business casual, nice shirt, slacks, professional but relaxed",
    "biz": "business suit, formal wear, professional attire",
    "fun": "workout clothes, gym wear, athletic clothing, shorts, sports bra",
    "uw": "underwear, lingerie, panties and bra, boxers, briefs",
    "ss": "swimsuit, bikini, swimming attire",
    "tl": "topless, bare chest, no shirt, nude from waist up",
    "nude": "nude, naked, no clothes, full body nude",
    "s1": "sexy outfit, revealing dress, club wear",
    "s2": "very revealing outfit, stripper costume, barely covered",
    "s3": "extremely revealing, almost nude, tiny outfit",
    "preg": "pregnant belly, maternity clothes, expecting"
}

# –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
HAIR_STYLE_PROMPTS = {
    "n": "natural hair",
    "s": "straight hair",
    "c": "curly hair, curls",
    "w": "wavy hair, waves"
}

FACIAL_HAIR_PROMPTS = {
    "n": "",  # –Ω–µ—Ç —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    "m": "mustache",
    "b": "beard, facial hair",
    "f": "full beard, heavy facial hair"
}

MAKEUP_PROMPTS = {
    "n": "natural look, no makeup",
    "l": "light makeup, subtle",
    "m": "makeup, cosmetics",
    "h": "heavy makeup, glamorous"
}

TATTOO_PROMPTS = {
    "n": "",  # –Ω–µ—Ç —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫
    "s": "small tattoo",
    "m": "tattoos, body art",
    "l": "many tattoos, heavily tattooed"
}

PIERCINGS_PROMPTS = {
    "n": "",  # –Ω–µ—Ç –ø–∏—Ä—Å–∏–Ω–≥–∞
    "e": "ear piercings",
    "o": "nose piercing",
    "m": "multiple piercings, facial piercings"
}

EXPRESSION_PROMPTS = {
    "n": "neutral expression",
    "s": "slight smile, smiling",
    "h": "happy, joyful expression",
    "f": "flirty, seductive expression"
}

CLOTHING_STYLE_PROMPTS = {
    "c": "casual style",
    "e": "elegant style, refined",
    "g": "gothic style, dark aesthetic",
    "s": "sporty style, athletic wear"
}

class SCWImageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è SCW"""
    
    def __init__(self, output_dir: str = "generated_characters", modkey: str = "custom"):
        self.output_dir = Path(output_dir)
        self.modkey = modkey
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        session_timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_dir = self.output_dir / f"session_{session_timestamp}"
        self.session_dir.mkdir(parents=True, exist_ok=True)
        
        print(f"üìÅ –°–µ—Å—Å–∏—è: {self.session_dir.name}")
        
    def check_webui_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Stable Diffusion WebUI"""
        try:
            response = requests.get(f"{WEBUI_API_URL}/options")
            return response.status_code == 200
        except:
            return False
    
    def generate_character_id(self, character: CharacterAttributes) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        timestamp = int(time.time() * 1000000)  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        random_part = random.randint(100, 999)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        
        if character.gender == "f":
            # –ñ–µ–Ω—â–∏–Ω—ã: –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏—Ñ—Ä (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0-4)
            char_id = f"{(timestamp + random_part) % 50000:05d}"
        else:
            # –ú—É–∂—á–∏–Ω—ã: –¥–æ–±–∞–≤–ª—è–µ–º 10000 + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
            char_id = f"{10000 + (timestamp + random_part) % 10000:05d}"
        
        return char_id
    
    def generate_character_seed(self, char_id: str) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π seed –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ ID"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ seed
        import hashlib
        hash_obj = hashlib.md5(f"{self.modkey}-{char_id}".encode())
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 –±–∞–π—Ç —Ö–µ—à–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int (–º–∞–∫—Å–∏–º—É–º –¥–ª—è seed –≤ SD)
        seed = int(hash_obj.hexdigest()[:8], 16) % (2**31 - 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 31 –±–∏—Ç–æ–º
        return seed
    
    def build_base_prompt(self, character: CharacterAttributes) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏"""
        prompt_parts = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        prompt_parts.append(GENDER_PROMPTS[character.gender])
        prompt_parts.append(AGE_PROMPTS[character.age_group])
        prompt_parts.append(ETHNICITY_PROMPTS[character.ethnicity])
        
        # –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        prompt_parts.append(BODY_SHAPE_PROMPTS[character.body_shape])
        
        # –í–æ–ª–æ—Å—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ)
        prompt_parts.append(HAIR_COLOR_PROMPTS[character.hair_color])
        prompt_parts.append(HAIR_LENGTH_PROMPTS[character.hair_length])
        
        # –°—Ç–∏–ª—å –≤–æ–ª–æ—Å
        hair_style_prompt = HAIR_STYLE_PROMPTS.get(character.hair_style, "")
        if hair_style_prompt:
            prompt_parts.append(hair_style_prompt)
        
        # –ì–ª–∞–∑–∞
        if character.eye_color in ["l", "d"]:  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            prompt_parts.append(f"{character.eye_color} eyes")
        
        # –í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
        expression_prompt = EXPRESSION_PROMPTS.get(character.expression, "")
        if expression_prompt:
            prompt_parts.append(expression_prompt)
        
        # –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –ª–∏—Ü–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º—É–∂—á–∏–Ω)
        if character.gender == "m" and character.facial_hair != "n":
            facial_hair_prompt = FACIAL_HAIR_PROMPTS.get(character.facial_hair, "")
            if facial_hair_prompt:
                prompt_parts.append(facial_hair_prompt)
        
        # –ú–∞–∫–∏—è–∂ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∂–µ–Ω—â–∏–Ω)
        if character.gender == "f" and character.makeup != "n":
            makeup_prompt = MAKEUP_PROMPTS.get(character.makeup, "")
            if makeup_prompt:
                prompt_parts.append(makeup_prompt)
        
        # –¢–∞—Ç—É–∏—Ä–æ–≤–∫–∏
        if character.tattoos != "n":
            tattoo_prompt = TATTOO_PROMPTS.get(character.tattoos, "")
            if tattoo_prompt:
                prompt_parts.append(tattoo_prompt)
        
        # –ü–∏—Ä—Å–∏–Ω–≥
        if character.piercings != "n":
            piercing_prompt = PIERCINGS_PROMPTS.get(character.piercings, "")
            if piercing_prompt:
                prompt_parts.append(piercing_prompt)
        
        # –†–∞–∑–º–µ—Ä—ã –≥—Ä—É–¥–∏/—Ç–µ–ª–∞
        if character.breast_penis_size == "s":
            if character.gender == "f":
                prompt_parts.append("small breasts, tiny chest, petite bust")
            else:
                prompt_parts.append("slim build")
        elif character.breast_penis_size == "l":
            if character.gender == "f":
                prompt_parts.append("large breasts, big bust")
            else:
                prompt_parts.append("athletic build, muscular")
        elif character.breast_penis_size == "h":
            if character.gender == "f":
                prompt_parts.append("huge breasts, very large bust")
            else:
                prompt_parts.append("very muscular, strong build")
        elif character.breast_penis_size == "x":
            if character.gender == "f":
                prompt_parts.append("extra huge breasts, gigantic bust, massive boobs")
            else:
                prompt_parts.append("extremely muscular, bodybuilder")
        
        # –°—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –ø–æ–∑–∞–º –æ–¥–µ–∂–¥—ã)
        if hasattr(character, 'clothing_style') and character.clothing_style != "c":
            style_prompt = CLOTHING_STYLE_PROMPTS.get(character.clothing_style, "")
            if style_prompt:
                prompt_parts.append(style_prompt)
        
        return ", ".join(filter(None, prompt_parts))  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    
    def build_pose_prompt(self, base_prompt: str, pose: str, reveal_level: int = 0) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑—ã —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        pose_prompt = POSE_PROMPTS.get(pose, "")
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏
        reveal_modifiers = {
            0: "modest, conservative, fully clothed",
            1: "slightly revealing, tasteful",
            2: "moderately revealing, stylish", 
            3: "revealing, sexy",
            4: "very revealing, provocative",
            5: "highly revealing, seductive",
            6: "extremely revealing, erotic",
            7: "barely covered, explicit",
            8: "almost nude, very explicit",
            9: "nude, artistic nudity",
            10: "nude, sensual",
            11: "nude, very explicit"
        }
        
        reveal_modifier = reveal_modifiers.get(reveal_level, "")
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_prompt = "masterpiece, best quality, high resolution, detailed, realistic, photorealistic"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ —Å—Ç–∏–ª—è
        style_prompt = "soft lighting, professional photography, clean background"
        
        # –ö–æ–º–ø–æ–Ω—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        full_prompt = f"{quality_prompt}, {base_prompt}, {pose_prompt}, {reveal_modifier}, {style_prompt}"
        
        return full_prompt
    
    def generate_negative_prompt(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return ("low quality, blurry, distorted, deformed, ugly, bad anatomy, "
                "extra limbs, missing limbs, watermark, signature, text, "
                "bad hands, malformed hands, extra fingers, missing fingers")
    
    def call_stable_diffusion_api(self, prompt: str, is_headshot: bool = False, seed: int = -1) -> Optional[Image.Image]:
        """–í—ã–∑—ã–≤–∞–µ—Ç API Stable Diffusion WebUI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width = 120 if is_headshot else 512
        height = 160 if is_headshot else 800
        
        payload = {
            "prompt": prompt,
            "negative_prompt": self.generate_negative_prompt(),
            "width": width,
            "height": height,
            "steps": 30,
            "cfg_scale": 7.5,
            "sampler_name": "DPM++ 2M Karras",
            "batch_size": 1,
            "n_iter": 1,
            "seed": seed,
            "restore_faces": True,
        }
        
        try:
            response = requests.post(f"{WEBUI_API_URL}/txt2img", json=payload)
            if response.status_code == 200:
                result = response.json()
                if result.get("images"):
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_data = base64.b64decode(result["images"][0])
                    return Image.open(io.BytesIO(image_data))
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def remove_background(self, image: Image.Image) -> Image.Image:
        """–£–¥–∞–ª—è–µ—Ç —Ñ–æ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != "RGB":
                image = image.convert("RGB")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω —Å –ø–æ–º–æ—â—å—é rembg
            output = remove(image)
            return output
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return image
    
    def generate_filename(self, character: CharacterAttributes, char_id: str, pose: str, 
                         reveal_level: int = 0) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º SCW"""
        
        if pose == "head":
            # –§–æ—Ä–º–∞—Ç –¥–ª—è –≥–æ–ª–æ–≤—ã: modkey-id-reqphys-optphys-imgphys-special-head.png
            reqphys = f"{character.gender}{character.age_group}{character.ethnicity}"
            optphys = f"{character.height}{character.body_shape}{character.hips_size}{character.breast_penis_size}{character.skin_tone}"
            imgphys = f"{character.hair_color}{character.hair_length}{character.eye_color}"
            special = "u"  # –æ–±—ã—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
            
            filename = f"{self.modkey}-{char_id}-{reqphys}-{optphys}-{imgphys}-{special}-head.png"
        else:
            # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∑: modkey-id-reveal-pose.png
            filename = f"{self.modkey}-{char_id}-z{reveal_level}-{pose}.png"
        
        return filename
    
    def generate_character_images(self, character: CharacterAttributes, poses: List[str] = None) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        
        if poses is None:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑—ã
            poses = [pose for pose, config in POSES_CONFIG.items() 
                    if config.get("required", False)]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∂–µ–Ω—Å–∫–∏–µ –ø–æ–∑—ã –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞
            if character.gender == "f":
                female_poses = [pose for pose, config in POSES_CONFIG.items() 
                              if config.get("female_only", False)]
                poses.extend(female_poses[:3])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –∂–µ–Ω—Å–∫–∏–µ –ø–æ–∑—ã
        
        char_id = self.generate_character_id(character)
        character_seed = self.generate_character_seed(char_id)
        base_prompt = self.build_base_prompt(character)
        
        print(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {char_id} (seed: {character_seed})")
        print(f"  –ê—Ç—Ä–∏–±—É—Ç—ã: {character.gender}, –≤–æ–∑—Ä–∞—Å—Ç {character.age_group}, {character.ethnicity}")
        
        generated_files = {}
        
        for pose in poses:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∂–µ–Ω—Å–∫–∏–µ –ø–æ–∑—ã –¥–ª—è –º—É–∂—Å–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            if POSES_CONFIG[pose].get("female_only", False) and character.gender == "m":
                continue
                
            print(f"  –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–∑—É: {pose}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Ä–æ–≤–Ω–µ–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑—ã
            reveal_variants = POSES_CONFIG[pose].get("reveal_variants", [0])
            pose_files = []
            
            for variant_idx, reveal_level in enumerate(reveal_variants):
                print(f"    –í–∞—Ä–∏–∞–Ω—Ç {variant_idx + 1}/{len(reveal_variants)} (—É—Ä–æ–≤–µ–Ω—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏: {reveal_level})")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∑—ã —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏
                full_prompt = self.build_pose_prompt(base_prompt, pose, reveal_level)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º seed –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                is_headshot = pose == "head"
                image = self.call_stable_diffusion_api(full_prompt, is_headshot, character_seed)
                
                if image:
                    # –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω (–∫—Ä–æ–º–µ –≥–æ–ª–æ–≤—ã, –¥–ª—è –Ω–µ—ë —ç—Ç–æ –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
                    if not is_headshot:
                        image = self.remove_background(image)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ SCW
                    filename = self.generate_filename(character, char_id, pose, reveal_level)
                    filepath = self.session_dir / filename
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏
                    image.save(filepath, "PNG")
                    pose_files.append(str(filepath))
                    
                    print(f"      –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
                    time.sleep(1)
                else:
                    print(f"      –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_idx + 1}")
            
            if pose_files:
                generated_files[pose] = pose_files
                print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(pose_files)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∑—ã {pose}")
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∑—ã {pose}")
        
        return generated_files

    def load_characters_from_config(self, config_file: str) -> List[CharacterAttributes]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        characters = []
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            for preset in config.get("character_presets", []):
                character = CharacterAttributes(
                    gender=preset["gender"],
                    age_group=preset["age_group"],
                    ethnicity=preset["ethnicity"],
                    height=preset.get("height", "m"),
                    body_shape=preset.get("body_shape", "n"),
                    hips_size=preset.get("hips_size", "m"),
                    breast_penis_size=preset.get("breast_penis_size", "m"),
                    skin_tone=preset.get("skin_tone", "l"),
                    hair_color=preset.get("hair_color", "m"),
                    hair_length=preset.get("hair_length", "m"),
                    eye_color=preset.get("eye_color", "m")
                )
                characters.append(character)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self.create_sample_characters()
            
        return characters
    
    def create_sample_characters(self) -> List[CharacterAttributes]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            from test_characters import get_simple_test_characters
            return get_simple_test_characters()
        except ImportError:
            # Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –µ—Å–ª–∏ —Ñ–∞–π–ª test_characters –Ω–µ –Ω–∞–π–¥–µ–Ω
            print("‚ö†Ô∏è –§–∞–π–ª test_characters.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
            characters = []
            
            characters.append(CharacterAttributes(
                gender="f", age_group=0, ethnicity="w",
                body_shape="s", breast_penis_size="s"
            ))
            
            characters.append(CharacterAttributes(
                gender="f", age_group=2, ethnicity="w",
                body_shape="c", breast_penis_size="x"
            ))
            
            characters.append(CharacterAttributes(
                gender="m", age_group=4, ethnicity="a",
                body_shape="f", breast_penis_size="l"
            ))
            
            return characters

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="SCW Character Image Generator")
    parser.add_argument("--output-dir", default="generated_characters", 
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    parser.add_argument("--modkey", default="custom", 
                       help="–ö–ª—é—á –º–æ–¥–∞ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--test", action="store_true",
                       help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    parser.add_argument("--test-type", choices=["simple", "detailed", "extreme"], default="simple",
                       help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: simple/detailed/extreme")
    parser.add_argument("--config", type=str,
                       help="JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    parser.add_argument("--count", type=int, default=None,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è --config)")
    
    args = parser.parse_args()
    
    generator = SCWImageGenerator(args.output_dir, args.modkey)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebUI
    if not generator.check_webui_connection():
        print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Stable Diffusion WebUI –Ω–∞ {WEBUI_URL}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ WebUI –∑–∞–ø—É—â–µ–Ω —Å —Ñ–ª–∞–≥–æ–º --api")
        return
    
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebUI —É—Å–ø–µ—à–Ω–æ: {WEBUI_URL}")
    
    characters = []
    
    if args.config:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        characters = generator.load_characters_from_config(args.config)
        if args.count and args.count < len(characters):
            characters = characters[:args.count]
    elif args.test:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        print(f"üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {args.test_type} –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
        
        try:
            if args.test_type == "simple":
                from test_characters import get_simple_test_characters
                characters = get_simple_test_characters()
            elif args.test_type == "detailed":  
                from test_characters import get_detailed_test_characters
                characters = get_detailed_test_characters()
            elif args.test_type == "extreme":
                from test_characters import get_extreme_test_characters
                characters = get_extreme_test_characters()
        except ImportError:
            print("‚ö†Ô∏è –§–∞–π–ª test_characters.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
            characters = generator.create_sample_characters()
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–ª–∞–≥–æ–≤:")
        print("  --test                    - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        print("  --config character_config.json - –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
        return
    
    if characters:
        print(f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {len(characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        successful = 0
        
        for i, character in enumerate(characters, 1):
            print(f"\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {i}/{len(characters)}")
            try:
                generated_files = generator.generate_character_images(character)
                if generated_files:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    total_images = 0
                    for pose_files in generated_files.values():
                        if isinstance(pose_files, list):
                            total_images += len(pose_files)
                        else:
                            total_images += 1
                    
                    print(f"‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ({len(generated_files)} –ø–æ–∑)")
                    successful += 1
                else:
                    print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            except KeyboardInterrupt:
                print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
                continue
        
        print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful}/{len(characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    else:
        print("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
